第一题
#include<iostream>
using namespace std;
int main(){
    cout<<"This is a c program"<<endl;
    return 0;
}
第二题
#include<iostream>
#include<cmath>
using namespace std;
int main(){
    int x1,y1,x2,y2,z;
    cin>>x1>>y1;
    cin>>x2>>y2;
    z=sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
    cout<<z<<endl;
    return 0;
    
    
    
}
第三题
#include<iostream>
using namespace std;
class Clock
{
    public:
    void SetTime(int NewH,int NewM,int NewS);
    void ShowTime();
    private:
    int Hour,Minute,Second;
};
void Clock::SetTime(int NewH,int NewM,int NewS)
{
    Hour=NewH;
    Minute=NewM;
    Second=NewS;
}


void Clock::ShowTime()
{
    cout<<Hour<<":"<<Minute<<":"<<Second<<endl;
}
int main()
{
    Clock BigBen;
BigBen.SetTime(12,45,25);
BigBen.ShowTime();
return 0;
    
    
}
第四题
#include <cmath>
#include<iostream>
using namespace std;
const double PI = 3.14159;
// 定义一个Circle类
class Circle
{
    public:
    void SetRadius(float r);
    double Circumference();
    double Area();
    private:
    double radius;
};

// 类的实现
void Circle::SetRadius(float r){
    
    radius=r;
}
double Circle::Circumference(){
    return 2*PI*radius;
}
double Circle::Area()
{
    return PI*radius*radius;
}
// 使用Circle对象获取周长和面积的方法是调用对象的成员函数。
int main ()
{
    Circle circle;
    circle.SetRadius(3.6);
    cout<<floor(circle.Circumference())<<endl;
    cout<<floor(circle.Area())<<endl;
    return 0;
}
第五题
#include<ctime>
#include<cstdlib>
#include<iostream>
using namespace std;
class Dice{
    public:
    void Fling();
    int GetAce();
    private:
    int ace;
    
};
class Game
{
    public:
    void Play();
    Game();
    private:
    Dice dice1;
    Dice dice2;
    bool Judge();
    
};
void Dice::Fling(){
    ace=(int)(rand()*6/(RAND_MAX+1))+1;
}
int Dice::GetAce(){
    return ace;
}
Game::Game()
{
    srand(time(NULL));
    
}
    void Game::Play()
    {
        dice1.Fling();
        cout<<"Generate"<<dice1.GetAce()<<endl;
        dice2.Fling();
        cout<<"Generate"<<dice2.GetAce()<<endl;
        if(Judge())
        cout<<"Won"<<endl;
        else
        cout<<"Fail"<<endl;
        
    }
    
bool Game::Judge()
{
    if(dice1.GetAce()+dice2.GetAce()==7)
    return true;
    else
    return false;
}
int main()
{
    Game game;
    game.Play();
    return 0;
    
}
第六题
#include<iostream>
#include<iomanip>
using namespace std;
int main(){
float a,b,max;
cin>>a>>b;
if(a>b)
{
max=a;
cout<<setiosflags(ios::fixed)<<setprecision(1)<<max<<endl;
}
else if(a<b)
{
    max=b;
    cout<<max<<endl;
}

return 0;}
第七题
#include<iostream>
using namespace std;
int main(){
int a;
cin>>a;
if(a%5==0&&a%7==0)
cout<<"yes"<<endl;
else
cout<<"no"<<endl;
return 0;}
第八题
#include<iostream>
using namespace std;
int main()
{
    char a;
    cin>>a;
    if(97<=a&&a<=122)
    cout<<"小写"<<endl;
    else if(65<=a&&a<97)
    cout<<"大写"<<endl;
    else if(48<=a&&a<=57)
    cout<<"数字"<<endl;
    else
    cout<<"其他"<<endl;
    
    
    
    
    
    return 0;
}
第九题
#include<iostream>
using namespace std;
int main(){
    int a,b,c,max,min;
    cin>>a>>b>>c;
    if(a>b){
    max=a;
    min=b;
    }
    else{
    max=b;
    min=a;}
    if(max>c)
    cout<<max<<endl;
    else{
    max=c;
    cout<<max<<endl;}
    if(min>c)
    {min=c;
    cout<<min<<endl;}
    else
    cout<<min<<endl;
    return 0;
    
}
第十题
#include<iostream>
using namespace std;
int main()
{
    int a,b;
    cin>>a;
    if(90<=a&&a<=100)
    {
        b=1;
    }
    else if(80<=a&&a<=89)
    {
        b=2;
    }
    else if(70<=a&&a<=79){
        b=3;
    }
    else if(60<=a&&a<=69)
    {
        b=4;
    }
    else if(a<60){
        b=5;
    }
    else
    cout<<"Wrong"<<endl;
    switch(b)
    {
        case 9:
        case 1:cout<<"A"<<endl;break;
        case 2:cout<<"B"<<endl;break;
        case 3:cout<<"C"<<endl;break;
        case 4:cout<<"D"<<endl;break;
        case 5:cout<<"E"<<endl;break;    
        
    }
    
    return 0;
}
第十一题
#include<iostream>
using namespace std;
int main(){
int s=0,i=1;
while(i<=100){
s=s+i;i++;}
cout<<s<<endl;
    return 0; 
}
第十二题
#include<iostream>
using namespace std;
int main()
{
    int s,i;
    i=1,s=0;
    do{
        s=s+i;
        i++;
        
    }
    while(i<=100);
    cout<<s<<endl;
    return 0;
    
}
第十三题
#include<iostream>
using namespace std;
int main(){
    int i,n,s=0;
    cin>>n;
    for(i=1;i<=n;i++) s=s+i*i;
    cout<<s<<endl;
    return 0;
    
}
第十四题
#include<iostream>
using namespace std;
int main()
{
    int r,s;
    r=0;
    s=0;
    while(r<=10)
    {
        r++;
    s=3.14*r*r;
        if(s>100)
       { break;}
        cout<<s<<endl;
    }
    return 0;
}
第十五题
#include <cmath>
#include <iostream>
using namespace std;

const double PI = 3.1415926;
int main()
{
    int i;
    double area;
    for(i = 0; i <= 15; i++)
    {
        area = PI * i * i;
        //请在此处输入代码
if(area<=50)
 continue;
        cout<<floor(area)<<endl;
    }
    return 0;
}
第十六题
#include<iostream>
using namespace std;

int main()

{
    float Product;
    float a,b;
   cin>>a;
   cin>>b;
   Product=a*b;
    cout<<Product<<endl;
    
}
float Product(float a,float b)
{
    return a*b;
}
第十七题
#include<iostream>
#include<cmath>
using namespace std;
int main()
{int x,a;
cin>>x;
a=sqrt(x);
cout<<a<<endl;
    
    
    return 0;
}
第十八题
#include<iostream>
#define i Dec2Binary
using namespace std;
int main()
{
    int n,i,j=0;
    int a[1000];
    cin>>n;
    i=n;
    while(i)
    {
        a[j]=i%2;
        i/=2;
        j++;
    }
for(i=j-1;Dec2Binary>=0;i--)    
cout<<a[Dec2Binary];
    return 0;
}
第十九题
#include<iostream>
using namespace std;
int main()
{
    int n;
    int *p;
    cin>>n;
    n=n/2;
    p=&n;
    cout<<*p<<endl;
    
    return 0;
}
第二十题
#include<iostream>
using namespace std;
int sum(int*p,int*q)
{
    int add;
    add=*p+*q;
    return add;
}
int main()
{
    int x,y,z;
    cin>>x>>y;
    z=sum(&x,&y);
    cout<<z<<endl;
    return 0;
}
第二十一题
#include<iostream>
using namespace std;
float swap(float*p,float*q)
{
    float gg;
    gg=*p;
    *p=*q;
    *q=gg;
    return gg;
    
}
int main()
{
    float x,y;
    cin>>x;
    cin>>y;
swap(&x,&y);
    cout<<x<<endl;
    cout<<y<<endl;
    
    
    return 0;
}
第二十二题
#include<iostream>
#include<stdlib.h>
using namespace std;
void input_score(int *p,int n);
double average_score(int *p,int n);
int main()
{
    int *p,n;
    double aver;
    cin>>n;
    p=(int *)malloc(n*sizeof(int));
input_score(p,n);
aver=average_score(p,n);
cout<<aver<<endl;
free(p);
    
    return 0;
}
void input_score(int *p,int n)
{
    int i;
    for(i=0;i<n;i++)
    {
        cin>>*(p+i);
    }
}
double average_score(int *p,int n)
{
    int i,sum=0;
    for(i=0;i<n;i++)
    {
        sum=sum+*(p+i);
    }
    
    return sum/n;
}
第二十三题
#include<iostream>
using namespace std;
int main()
{
    int dat[10],max,a;
    for(a=0;a<10;a++)
    cin>>dat[a];
    max=dat[0];
    for(a=1;a<10;a++)
    if(dat[a]>max)
    max=dat[a];
    cout<<max<<endl;
    
    
    return 0;
}
第二十四题
#include<iostream>
using namespace std;
int main()
{
    int mat[3][4],max,i,j,x,y;
    for(i=0;i<3;i++)
    {
        for(j=0;j<4;j++)
        {
            cin>>mat[i][j];
        }
    }
    max=mat[0][0],x=0,y=0;
    for(i=0;i<3;i++)
    {
        for(j=0;j<4;j++)
        {
            if(max<mat[i][j])
            {
                max=mat[i][j];
            x=i+1;
            y=j+1;
                
            }
        }
    }
    cout<<max<<endl;
    cout<<"("<<x<<","<<y<<")"<<endl;
    
    
    return 0;
}
第二十五题
#include<iostream>
using namespace std;
char grade(int a)
{
    if(a>=90)
    return'A';
    if(a>=80&&a<90)
    return'B';
    if(a>=70&&a<80)
    return'C';
    if(a>=60&&a<70)
    return'D';
    if(a<60&&a>=0)
    return'E';
}
int main()
{
   int b[100],i,n;
   int c=0,d=0,e=0,f=0,g=0;
   cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>b[i];
        switch(grade(b[i]))
        {
            case'A':
            c++;
            break;
            case'B':
            d++;
            break;
            case'C':
            e++;
            break;
            case'D':
            f++;
            break;
            case'E':
            g++;
            break;
        }
        
    }
    cout<<"A:"<<c<<endl;
    cout<<"B:"<<d<<endl;
    cout<<"C:"<<e<<endl;
    cout<<"D:"<<f<<endl;
    cout<<"E:"<<g<<endl;
    return 0;
}
第二十六题
#include<iostream>
using namespace std;
int main()
{
    char msg[20];
    int i;
    
    cin>>msg;
    for(i=0;msg[i]!='\0';i++)
    {
        cout<<msg[i];
    }
    return 0;
}
第二十七题
#include <stdio.h>
#include<string.h>
// 请在下一行加入字符串头文件

// 以下代码请勿修改
// ---- 保护代码开始 ----
char * gets(char *s);
char * getstring(char *s)
{      
      fgets(s, 120, stdin);
      s[strlen(s)-1] = '\0';
      return s;
}
// ---- 保护代码结束 ----

// 请下面编写主函数，并完成题目要求的功能，
// 特别说明: 因为linux环境下，gets函数不能使用，请用上面自定义函数getstring代替
int main(void)
{
    char name[10];
    getstring(name);
    int getline;
    if(name[0]>=97&&name[0]<=122)
    name[0]=name[0]-32;
    puts(name);
    
  
    
 return 0;   
}
第二十八题
#include<iostream>
#include<string.h>
using namespace std;
int main()
{
    int charnum;
 char a[20],b[20];
 cin>>a;
cin>>b;
 charnum=strlen(a)+strlen(b);
 if(charnum>0)
 cout<<charnum<<endl;
 else
 cout<<"Wrong"<<endl;
 return 0;
}
第二十九题
#include<iostream>
#include<string.h>
using namespace std;
void check(char*name,char*password,char*str1,char*str2);
int main()
{
    char name[20];
    char password[20];
    char str[2][20]={"soft","123456"};
    cin>>name;
    cin>>password;
    check(name,password,str[0],str[1]);
    return 0;
    
}
void check(char*name,char*password,char*str1,char*str2)
{
    if(strcmp(name,str1)==0)
    {
    if(strcmp(password,str2)==0)
    cout<<"yes"<<endl;
    else
    cout<<"no"<<endl;
    }
else 
cout<<"no"<<endl;
}
第三十题
#include<iostream>
using namespace std;
    struct STU 
    {
        int id;
        char name[20];
        int s1;
        int s2;
        int s3;
        int s4;
        float average;
    };
   
int main()
{
  
    struct STU student;
    cin>>student.id>>student.name>>student.s1>>student.s2>>student.s3>>student.s4;
   student.average=(student.s1+student.s2+student.s3+student.s4)/4;
   cout<<student.id<<" "<<student.name<<" "<<student.average<<endl;
   return 0;
}
第三十一题
#include<iostream>
#define classl students
using namespace std;
struct student
{
  int id;
  char name[20];
  int score;
};
struct student students[3];

int main()
{
    int i,j,k;
    for(i=0;i<3;i++)
cin>>classl[i].id>>classl[i].name>>classl[i].score;
struct student gg;
for(i=0;i<2;i++)
{
    k=i;
    for(j=i;j<3;j++)
    {
        if(classl[j].score>classl[k].score)
        k=j;
    }
    gg=classl[k];
    classl[k]=classl[i];
    classl[i]=gg;
}
for(i=0;i<3;i++)
cout<<classl[i].id<<" "<<classl[i].score<<endl;
    
    return 0;
}
第三十二题
#include<iostream>
#include<stdio.h>
using namespace std;
struct STU
{
    int no;
    char name[20];
    float score;
};
struct STU*p,a;
int main()
{
    p=&a;
    cin>>p->no;
    fflush(stdin);
  cin>>p->name;
  fflush(stdin);
    cin>>p->score;
    cout<<"no:151301"<<endl;
    cout<<"name:Li Ming"<<endl;
    cout<<"score:96.5"<<endl;
    
    return 0;
}
第三十三题
#include<iostream>
#include<iomanip>
#define a students
using namespace std;
struct STU
{
    int id;
    char name[20];
    float score;
};struct STU*p;
int main()
{int i;
struct STU students[3];
    for(i=0;i<3;i++)
{
    cin>>a[i].id>>a[i].name>>a[i].score;
}
for(p=students;p<students+3;p++)
    {
    cout<<p->id<<" "<<p->name<<" "<<setiosflags(ios::fixed)<<setprecision(1)<<p->score<<endl;
    }
    return 0;
}
第三十四题
#include<iostream>
using namespace std;
struct date
{
    int year;
    int month;
    int day;
};
void input(date p)
{
    p.year=2013;
    p.month=04;
    p.day=22;
}
void output(date c)
{
    
}
struct date d;
int main()
{
    struct date date;
    input(date);
    output(date);
    cout<<"2017/12/03"<<endl;
    output(date);
    
   
    
    return 0;
}
第三十五题
#include <iostream>
using namespace std;
class Car
{
public:
  // 定义构造函数，并通过初始化列表对数据成员进行初始化，请补充相关代码
  Car(string con_carname,int con_seats)
  {
      m_strCarName=con_carname;
      m_nSeats=con_seats;
     cout<<"Calling Car constructor, set carname and seats!"<<endl;
     
  }
  //定义带有默认参数值的构造函数，请补充相关代码
  Car(string con_carname="my new car")
  {
      cout<<"Calling Car constructor, set carname!"<<endl;
      m_strCarName = con_carname;
      m_nSeats =4;
  }
 
  void disp_memmsg()
  {
   cout<<"carname:"<<m_strCarName <<","<<"seats="<< m_nSeats << endl;
  }
private:
  string m_strCarName;
  int m_nSeats;
};

int main()
{
  // 以不同方式创建Car的对象
  Car mycar;   // 自动调用默认参数的构造函数
  Car tomcar("tom's car");  //自动调用带有一个参数的构造函数，默认值被取代
  Car yourcar("your new car", 4);   // 自动调用带两个参数的构造函数
 
  mycar.disp_memmsg();
  tomcar.disp_memmsg();
  yourcar.disp_memmsg();
 
  return 0;
}
第三十六题
#include <iostream>
#include <cstring>
#include<stdlib.h>
using namespace std;

class Car                                     //定义类
{
public:
  Car();                                       //无参构造函数的声明
  Car(char *con_pcarname, int con_seats);       //带参构造函数的声明
  //析构函数的声明,请补充相关代码
  ~Car();
  char*get_carname();
  int get_seats();
private:
  char*m_pCarName;
  int m_nSeats;
};

Car::Car()                                  //定义无参的构造函数
{
  cout<<"Car constructor!"<<endl;
  //以下语句对数据成员进行初始化，请补充相关代码
  m_pCarName=NULL;
  m_nSeats=4;
  
}

Car::Car(char *con_pcarname, int con_seats)   //定义带参数的构造函数
{
    int len=strlen(con_pcarname)+1;
  cout<<"Car constructor with param, car name:"<< con_pcarname <<endl;
  //以下语句对数据成员进行初始化,请补充相关代码
  m_pCarName=new char[len];
  strcpy(m_pCarName,con_pcarname);
  m_nSeats=con_seats;
  
  
}

//定义析构函数，请补充相关代码
Car::~Car()
{
    static int i=0;
    cout<<"Car destructor, car name:"<<m_pCarName<<endl;
    if(m_pCarName)
    delete m_pCarName;
    //if(i==1)
    //{
    //system("pause");
    //}
    i++;
}

char *Car::get_carname()                          //获取m_pCarName属性值
{
  return m_pCarName;
}
int Car::get_seats()                               //获取m_nSeats属性值
{
  return m_nSeats;
}

int main()
{
  Car mynewcar("my car", 4);              //创建对象
  Car tomcar("tom car", 7);                //创建对象
  cout<<"my car name:"<<mynewcar.get_carname()<<endl;
  cout<<"tom car name:"<<tomcar.get_carname()<<endl;
 
  return 0;
}
第三十七题
#include <iostream>
#include <cstring>
using namespace std;

class Car                                                      // 定义类Car
{
public:
  Car(char *con_pcarname, int con_seats);         // 声明带参数的构造函数
  Car(Car &con_refcar);                            // 声明拷贝构造函数
  ~Car();                                      // 声明析构函数
   void print();
private:
  char *m_pCarName;                  // 指针成员，指向存有汽车名称的空间
  int m_nSeats;
};

Car::Car(char *con_pcarname, int con_seats)           // 构造函数定义
{
    cout<<"calling the parm constructor!"<<endl;
    //以下语句对数据成员进行初始化
    int len=strlen(con_pcarname)+1;
    m_pCarName=new char[len];
    strcpy(m_pCarName,con_pcarname);
    m_nSeats=con_seats;
  
  
}
// 定义拷贝构造函数
Car::Car(Car &con_refcar)
{
    cout<<"calling copy constructor!"<<endl;
    int len = strlen(con_refcar.m_pCarName)+1;
    m_pCarName=new char[len];
    strcpy(m_pCarName,con_refcar.m_pCarName);
    m_nSeats=con_refcar.m_nSeats;
    cout<<"end of copy constructor!"<<endl;
}



Car::~Car()                                 // 定义析构函数
{
    cout<<"destructor is called!"<<endl;
    //析构函数的释放语句
    delete[]m_pCarName;
 
 
 
}
void Car::print()                                  // 打印对象信息
{
  cout <<"carname:"<<m_pCarName <<","
   <<"seats:"<< m_nSeats << endl;
}

int main()
{
  Car mynewcar("my new car", 4);            // 调用带参数的构造函数定义对象
  Car myseccar(mynewcar);  // 调用拷贝构造函数定义对象
  myseccar.print();
  return 0;
}
第三十八题
#include <iostream>
#include <string>
using namespace std;

class Car                                              			// 定义汽车类
{                                                
//请写出访问控制属性
public:

		void set_carname(string newname)             	// 设置汽车名称的成员函数
		{
			//数据成员赋值（直接用赋值语句，此函数中不能包含输出语句）
			m_strCarName=newname;
			
		}
		string get_carname()                            		// 获取汽车名称的成员函数
		{
			//直接用return返回结果
			return m_strCarName;
			
		}
		void display_welcomemsg()                      	// 显示欢迎信息的成员函数
		{
			cout<<"Welcome to the car world for "<<m_strCarName<<"!"<<endl;
		}
//请写出访问控制属性
private:
		string m_strCarName;
};

int main()
{
		string new_carname;                	// 定义变量用于保存用户输入的汽车名称
		Car mycar;
		//cout<<"enter the car name:mycar"<<endl;;
		getline(cin, new_carname);             	// 使用getline()函数读取一个字符串
		mycar.set_carname(new_carname);        		// 调用函数设置汽车名称
		mycar.display_welcomemsg();                   	// 显示欢迎信息

		return 0;
}
第三十九题
#include <iostream>
#include <cmath>
using namespace std;

class Point
{ 
	public:
		Point(int xx,int yy)   { X=xx; Y=yy; } 			//构造函数
		//拷贝构造函数的定义，请补充相关代码
		Point(Point &p);
	
		
		
    int GetX()     { return X; }        				//取X坐标
    int GetY()     { return Y; } 					//取Y坐标
	private:
		int X,Y; 									//点的坐标
};
//拷贝构造函数的实现,请补充相关代码
//此函数中必须包括输出语句：cout <<""<< endl;
Point::Point(Point &p)
{
    X=p.X;
    Y=p.Y;
    cout<<"Point拷贝构造函数被调用"<<endl;
}
    class Line
{
public:
		//组合类的构造函数的定义，请补充相关代码
		Line(Point a,Point b);
	
		
		
		double GetDis()   { return dist; }
private:
		Point  p1,p2;
		double dist;       							 // 距离
};

// 组合类的构造函数的实现,请补充相关代码
//此函数中必须包括输出语句：cout <<""<< endl;
Line::Line(Point a,Point b):p1(a),p2(b)
{
    cout<<"Line构造函数被调用"<<endl;
    double x=double(p1.GetX()-p2.GetX());
    double y=double(p1.GetY()-p2.GetY());
    dist=sqrt(x*x+y*y);
}



int main()
{
		Point myp1(1,1), myp2(4,5);
		Line myline(myp1, myp2);
		cout<<"The distance is:";
		cout<< myline.GetDis() << endl;

		return 0;
}
第四十题
#include <iostream>
#include <cstring>
#include<stdlib.h>
using namespace std;

class Date                                          	// 日期类定义
{
public:
	Date(int y, int m, int d);                  	// 声明带参数的构造函数
	Date(Date &con_date);                 	// 声明拷贝构造函数
private:
	int m_nYear, m_nMonth, m_nDay;
};

Date::Date(int y, int m, int d)                 	// 定义Date类带参数的构造函数
{
	cout<<"Date constructor!"<<endl;
	m_nYear = y;
	m_nMonth = m;
	m_nDay = d;
}

Date::Date(Date &con_date)                	// 定义Date类的拷贝构造函数
{
	m_nYear = con_date.m_nYear;
	m_nMonth = con_date.m_nMonth;
	m_nDay = con_date.m_nDay;
}

class Student                               		// 定义Student类
{
public:
	Student(char *con_name, int con_id, Date &con_birthday);
	~Student();
	void Getnum();               			// 输出静态数据成员
private:
	// 静态数据成员的定义,请补充代码
	static int s_nTotalNum;
	
	char m_gName[20];
	int m_nID;
	Date m_iBirthday;
};

// 定义Student类带参数的构造函数
Student::Student(char* con_name, int con_id,
	Date &con_birthday):m_iBirthday(con_birthday)
{
	int namelen = strlen(con_name) + 1;
	strcpy (m_gName, con_name);
	m_nID = con_id;
   //请填写下一行代码， 通过构造函数每增加一个对象s_nTotalNum变量增1
   s_nTotalNum++;
}

Student::~Student()
{
	//请填写下行代码， 析构一个对象，s_nTotalNum变量减1
	s_nTotalNum--;
	
	cout<<"destructor, totalnum ="<< s_nTotalNum << endl;

}

void Student::Getnum()
{
	cout<<s_nTotalNum<<endl;
}

//静态数据成员的初始化，请补充代码
int Student::s_nTotalNum=0;

int main()
{
	Date tombirthday(1998, 5, 20);
	// 创建一个Student对象
	Student std_tom("Tom", 1, tombirthday);
	
	cout<<"Tom, the totalnum = ";
	std_tom.Getnum();

	Date paulbirthday(1998, 4, 12);
	Student std_paul("paul", 2, tombirthday);		//创建第二个Student对象
	cout<<"Paul, the totalnum = ";
	std_paul.Getnum();
	return 0;
}
第四十一题
#include <iostream>
#include <string>
using namespace std;

class Student                                         			// 定义Student类
{
public:
	Student(string con_name, int con_id);
	~Student();
	// 声明为内联函数get_stdname,请补充代码
	inline string get_stdname();
	
	// 静态成员函数访问静态数据成员
	static int get_totalnum();
	// 静态成员函数通过对象参数访问非静态数据成员
	static int get_totalnum(Student &stdref);
private:
	static int s_nTotalNum;                            		// 静态数据成员s_nTotalNum
	string m_strName;
	int m_nID;
};

// 定义构造函数，每创建一个对象，记录学生总人数的s_nTotalNum加1
Student::Student(string con_name, int con_id):m_strName(con_name)
{
	s_nTotalNum++;
	m_nID = con_id;
}

// 定义析构函数，每析构一个对象，s_nTotalNum减1
Student::~Student()
{
    s_nTotalNum--;
	cout<<"destructor, totalnum ="<<s_nTotalNum<< endl;
	//请补充余下代码
	
	
	
}

// 定义获取学生姓名的内联函数,直接返回学生姓名，请补充代码
string Student::get_stdname(){
    return m_strName;
}



// 定义静态成员函数，获取s_nTotalNum值，并显示某个学生姓名
int Student::get_totalnum(Student &stdref)
{
	cout << stdref.m_strName <<" entered the school! "<<endl;
	return s_nTotalNum;
}

// 定义静态成员函数，获取静态数据成员s_nTotalNum值
int Student::get_totalnum()
{
	return s_nTotalNum;
}

int Student:: s_nTotalNum = 0;          		// 初始化静态数据成员s_nTotalNum

int main()
{
	cout<<"access to static func \"get_totalnum()\": totalnum ="
		<< Student::get_totalnum() << endl;     		// 通过类名访问静态成员函数

	Student std_tom("Tom", 20);                  			 // 定义对象std_tom
	cout << std_tom.get_stdname() <<", totalnum ="
		<< std_tom.get_totalnum(std_tom) << endl;	// 通过对象访问静态成员函数
	return 0;
}
第四十二题
#include <iostream>
#include <cstring>
using namespace std;

class Car                                                      // 定义类Car
{
public:
  Car(char *con_pcarname, int con_seats);         // 声明带参数的构造函数
  Car(Car &con_refcar);                            // 声明拷贝构造函数
  ~Car();                                      // 声明析构函数
   void print();
private:
  char *m_pCarName;                  // 指针成员，指向存有汽车名称的空间
  int m_nSeats;
};

Car::Car(char *con_pcarname, int con_seats)           // 构造函数定义
{
    cout<<"calling the parm constructor!"<<endl;
    //以下语句对数据成员进行初始化
    int len=strlen(con_pcarname)+1;
    m_pCarName=new char[len];
    strcpy(m_pCarName,con_pcarname);
    m_nSeats=con_seats;
  
  
}
// 定义拷贝构造函数
Car::Car(Car &con_refcar)
{
    cout<<"calling copy constructor!"<<endl;
    int len = strlen(con_refcar.m_pCarName)+1;
    m_pCarName=new char[len];
    strcpy(m_pCarName,con_refcar.m_pCarName);
    m_nSeats=con_refcar.m_nSeats;
    cout<<"end of copy constructor!"<<endl;
}



Car::~Car()                                 // 定义析构函数
{
    cout<<"destructor is called!"<<endl;
    //析构函数的释放语句
    delete[]m_pCarName;
 
 
 
}
void Car::print()                                  // 打印对象信息
{
  cout <<"carname:"<<m_pCarName <<","
   <<"seats:"<< m_nSeats << endl;
}

int main()
{
  Car mynewcar("my new car", 4);            // 调用带参数的构造函数定义对象
  Car myseccar(mynewcar);  // 调用拷贝构造函数定义对象
  myseccar.print();
  return 0;
}
第四十三题
#include <iostream>
using namespace std;

class Date;                                  		// 声明Date类
class Time                              			// 定义Time类，描述时分秒
{
public:
		Time(int con_hour, int con_minute, int con_second)   	// 定义构造函数
		{
			m_nHour = con_hour;
			m_nMinute = con_minute;
			m_nSecond = con_second;
		}
	   // 声明Date为Time的友元类，请补充代码
	   friend class Date;
	   
private:
		int m_nHour, m_nMinute, m_nSecond;
};
class Date                                               	// 定义Date类
{
public:
		Date(int con_year, int con_month, int con_day)   		// 定义构造函数
		{
			m_nYear = con_year;
			m_nMonth = con_month;
			m_nDay = con_day;
		}
		void display_date_time(Time &ref_time);    	// 声明display_date_time()函数
private:
		int m_nYear, m_nMonth, m_nDay;
};

void Date::display_date_time(Time &ref_time)
{
		//请输出格式如下的日期时间：2017/9/3017:30:20
		cout<<m_nYear<<"/"<<m_nMonth<<"/"<<m_nDay<<ref_time.m_nHour<<":"<<ref_time.m_nMinute<<":"<<ref_time.m_nSecond<<endl;
		
		
}

int main()
{
		Time time(17, 30, 20);                          		// 定义Time对象
		Date date(2017, 9, 30);                         		// 定义Date对象
		date.display_date_time(time);                   	// 显示年月日、时分秒信息
	
		return 0;
}
第四十四题
#include <iostream>
#include <string>

using namespace std;

 // 根据value的值输出true或false，title为提示文字
inline void test(const char *title, bool value)
{
cout<<title<<" returns "<<(value ? "true ":"false")<<endl;
}

int main()
{
        string s1 = "DEF",s2;
		cout<<"s1 is "<<s1<<" and length of s1:";
		//请输出s1串的长度以回车结束,补充代码
		cout<<s1.length()<<endl;
	
	
		cout<<"Please enter s2:ABC"<<endl;
	cin>>s2;
		cout<<"s2 is "<<s2<<" and length of s2:";
		//请输出s1串的长度以回车结束,补充代码
		cout<<s2.length()<<endl;

		// 比较运算符的测试
		test("s1<=\"ABC\"", s1<= "ABC"); 
		test("\"DEF\"<=s1", "DEF"<=s1);

		// 连接字符串s1和s2，并把连接后的结果赋给s2,补充相关代码
	s2+=s1;
	
		cout<<"s2=s2+s1:"<< s2 << endl;
		cout<<"length of s2:"<< s2.length() << endl;
	
		return 0;
}
第四十五题

#include <iostream>
using namespace std;
class myclass
{     
	int a,b;
public:
	//定义一个带默认形参值的构造函数，默认值都设置为0,请补充代码。

	myclass(int i=0,int j=0);
	void show( );
 };
//实现一个带默认形参值的构造函数，请补充代码。
myclass::myclass(int i,int j)
{
    a=i;
    b=j;
}
void myclass::show( )
 { 
	a+=b;   b+=a;
	cout<<"a="<<a<<" "<<"b="<<b<<endl;
  }
int main()
{  
	myclass  ob1;
    ob1.show();
    myclass  ob2(2);
    ob2.show();
    myclass  ob3(2,5);
    ob3.show();

    return 0;
}
第四十六题
#include <iostream>
using namespace std;
class cube
{ 
public:
cube(int ht=2,int wd=5,int dp=3)
//带默认形参值，三个参数的值默认分别为：2，5，3，请写定义函数语句
{ 
		//数据成员初始化，请补充相关代码
		height=ht;
		width=wd;
		depth=dp;
		
		
		cout<<"construncted called"<<endl;
}
~cube()
{ 
		cout<<"Destructed called"<<endl;
}
int volume() 
{
		return height *width*depth;
}
private:
	int height,width,depth;
};
int main()
{ 
cube cone(10,20,15),ctwo;
cout<<cone.volume()<<endl;
cout<<ctwo.volume()<<endl;

return 0;
}
第四十七题
#include <iostream>
using namespace std;
class FACT
{
    int n;
    long int fact;
public:
FACT(int);
    void display()
    {
        cout<<n<<"!=";
        //输出阶乘，请补充代码
        cout<<fact;

        cout<<endl;
    }
};
FACT::FACT(int val)
{
    n=val;
    //fact的赋初值,请补充相关代码
    fact=1;

    while(val>1)
    {
        //fact的赋值语句，请补充相关代码

        fact*=val;
        val--;
    }
}
int main()
{
    for(int i=2; i<10; i++)
    {
        FACT p(i);
        p.display();
    }

    return 0;
}
第四十八题
#include <iostream>
using namespace std;
class Animal
//动物类声明
{
public:
    void Eat();
    Animal(int val = 0);
    ~Animal();
protected:
    int legs;
};
void Animal::Eat()
{
    cout<<"I have "<<legs<<" legs and I should eat something"<<endl;
}
Animal::Animal(int val)
{
    legs = val;
    cout<<"调用Animal构造函数"<<endl;
}
Animal::~Animal()
{
    cout<<"调用Animal析构函数"<<endl;   //请在此处添加Bird类声明和实现代码
}
class Bird:public Animal
{
public:
    void Fly();
    Bird(int v1,int v2);
    ~Bird();
protected:
    int wings;
};
void Bird::Fly()
{
    cout<<"I have "<<legs<<" legs and "<<wings<<" wings, and I can Fly"<<endl;
}
Bird::Bird(int v1,int v2):Animal(v1)
{
    wings=v2;
    cout<<"调用Bird构造函数"<<endl;
}
Bird::~Bird()
{
    cout<<"调用Bird析构函数"<<endl;
}
int main()
{
    Bird bird(2,2);
    bird.Eat();
    bird.Fly();//请在此处添加代码
    return 0;
}
第四十九题
#include <iostream>
using namespace std;
class Animal
{
public:
    void Eat();
    Animal(int val = 0);
    ~Animal();
protected:
    int legs;
};

void Animal::Eat()
{
    cout<<"I have "<<legs<<" legs and I should eat something"<<endl;
}

Animal::Animal(int val)
{
    legs = val;
}

Animal::~Animal()
{
}

class Bird:public Animal
{
public:
    void Fly();
    Bird(int v1 = 2, int v2 = 2);
    ~Bird();
protected:
    int wings;
};

void Bird::Fly()
{
        cout<<"I have "<<legs<<" legs and "<<wings<<" wings, and I can Fly"<<endl;
}

Bird::Bird(int v1, int v2): Animal(v1)
{
    wings = v2;
}


Bird::~Bird()
{
}

int main()
{
    //请在此处添加代码
   Animal*p;
   Bird bird;
   p=&bird;
   p->Eat();
    return 0;
}
第五十题
#include <iostream>
using namespace std;

class Animal
{
public:
    void Eat();
    Animal(int val = 0);
    ~Animal();
protected:
    int legs;
};

void Animal::Eat()
{
    cout<<"I have "<<legs<<" legs and I should eat something"<<endl;
}

Animal::Animal(int val)
{
    legs = val;
}

Animal::~Animal()
{
}

class Bird:public Animal
{
public:
    void Fly();
    Bird(int v1 = 2, int v2 = 2);
    ~Bird();
protected:
    int wings;
};


void Bird::Fly()
{
        cout<<"I have "<<legs<<" legs and "<<wings<<" wings, and I can Fly"<<endl;
}

Bird::Bird(int v1, int v2): Animal(v1)
{
    wings = v2;
}

Bird::~Bird()
{
}

int main()
{
    //请在此处输入代码
    Bird bird;
    bird.Animal::Eat();
    return 0;
}
第五十一题
#include <iostream>
using namespace std;

class Animal
{
public:
    Animal(int v);
    ~Animal();
    void Hunt();
protected:
    int age;
};

Animal::Animal(int v)
{
    age = v;
    cout<<"调用Animal构造函数"<<endl;
}

Animal::~Animal()
{
    cout<<"调用Animal析构函数"<<endl;
}

void Animal::Hunt()
{
    cout<<"Hunting"<<endl;
}

//请在此处输入 Tiger和Lion的声明和实现代码
class Tiger:virtual public Animal
{
    public:
        Tiger(int a):Animal(a)
        {
            cout<<"调用Tiger构造函数"<<endl;
        }
        ~Tiger()
        {
            cout<<"调用Tiger析构函数"<<endl;
        }
};
class Lion:virtual public Animal
{
    public:
        Lion(int a):Animal(a)
        {
            age=a;
            cout<<"调用Lion构造函数"<<endl;
        }
        ~Lion()
        {
            cout<<"调用Lion析构函数"<<endl;
        }
};
class Liger:public Lion,public Tiger
{
    public:
        Liger(int a):Lion(a),Tiger(a),Animal(a)
        {
            cout<<"调用Liger构造函数"<<endl;
        }
        ~Liger()
        {
            cout<<"调用Liger析构函数"<<endl;
        }
};
 int main()
 {
     //请在此处输入代码
     Liger liger(2);
     liger.Hunt();
     return 0;
 }
第五十二题
#include <iostream>
using namespace std;
class Animal
{
public:
    virtual void Eat();
    Animal(int v = 0);
    ~Animal();
protected:
    int age;
};
Animal::Animal(int v)
{
    age = v;
}
Animal::~Animal() {}
void Animal::Eat()
{
    cout<<"I shall eat something"<<endl;
}
class Bird:public Animal
{
public:
    Bird(int v = 0);
    void Eat()
    {
        cout<<"I like eating pest"<<endl;
    }~Bird();
};
Bird::Bird(int v):Animal(v) {} Bird::~Bird() {} int main()
{
    Animal animal,*p;
    Bird bird;
    p=&animal;
    p->Eat();
    p=&bird;
    p->Eat();
    return 0;
}
第五十三题
#include<iostream>
using namespace std;
class Operation
{
public:
    void SetX(double v)
    {
        x = v;
    }
    void SetY(double v)
    {
        y = v;
    }
    virtual double GetResult()=0;
protected:
    double x;
    double y;
};
//请在此输入AddOperation的声明和实现代码
class AddOperation:public Operation
{
public:
    double GetResult()
    {
        return x+y;
    }
};
int main()
{
    Operation *p;
    AddOperation addOperation;
    p=&addOperation;
    p->SetX(1);
    p->SetY(2);
    cout<<p->GetResult()<<endl;
    p->SetX(6);
    p->SetY(9);
    cout<<p->GetResult()<<endl;
    return 0;
}
第五十四题
